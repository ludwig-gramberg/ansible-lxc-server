---

- name: container run user name and uids
  set_fact:
    uid_begin: "{{ container.userns_offset }}"
    uid_end: "{{ (container.userns_offset+65536)|int }}"

- name: uid for container
  raw: usermod --add-subuids {{ uid_begin }}-{{ uid_end }} root
- name: gid for container
  raw: usermod --add-subgids {{ uid_begin }}-{{ uid_end }} root

# user and file layout for lxc

- name: include vars
  include_vars: "../../vars/admins.yml"

- name: spawn-container cfg file
  template: dest=/etc/lxc/{{ container.hostname }}.conf src=lxc.default.conf.j2

# get container ready to be used directly via ssh bastion by ansible

- name: create barebone container
  command: lxc-create -f /etc/lxc/{{ container.hostname }}.conf --name {{ container.hostname }} --template download -- --release jessie --arch amd64 --dist debian
  args:
    creates: "/var/lib/lxc/{{ container.hostname }}/config"
  register: container_created

- name: create mount source directories
  file:
    state: directory
    dest: "{{ item.source_path }}"
    mode: 0755
    owner: "{{ uid_begin }}"
    group: "{{ uid_begin }}"
  with_items: "{{ container.master_mount | default([]) }}"

- name: create mount target directories
  file:
    state: directory
    dest: "{{ item.target_path }}"
    mode: 0755
    owner: "{{ uid_begin }}"
    group: "{{ uid_begin }}"
  with_items: "{{ container.master_mount | default([]) }}"

- name: container config
  template: dest=/var/lib/lxc/{{ container.hostname }}/config src=lxc.config.j2

# preparing some container files from outside container as root
# mostly getting container network ready

- name: ipv4 precedence over ipv6
  lineinfile: dest=/var/lib/lxc/{{ container.hostname }}/rootfs/etc/gai.conf line="precedence ::ffff:0:0/96  100"

- name: network interfaces
  template: dest=/var/lib/lxc/{{ container.hostname }}/rootfs/etc/network/interfaces src=network.interfaces.j2

- name: iptables dir
  file: path=/var/lib/lxc/{{ container.hostname }}/rootfs/etc/iptables state=directory owner={{ uid_begin }} group={{ uid_begin }} mode=0644

- name: empty iptables rules v4
  file: path=/var/lib/lxc/{{ container.hostname }}/rootfs/etc/iptables/rules.v4.source state=touch owner={{ uid_begin }} group={{ uid_begin }}

- name: empty iptables rules v6
  file: path=/var/lib/lxc/{{ container.hostname }}/rootfs/etc/iptables/rules.v6.source state=touch owner={{ uid_begin }} group={{ uid_begin }}

- name: resolve.conf
  template: dest=/var/lib/lxc/{{ container.hostname }}/rootfs/etc/resolv.conf src=resolv.conf.j2

- name: apt/sources.list
  template: dest=/var/lib/lxc/{{ container.hostname }}/rootfs/etc/apt/sources.list src=apt.sources.list.j2

# restart container

- name: stop container
  command: lxc-stop -k -n {{ container.hostname }}
  ignore_errors: True

- name: start container
  command: lxc-start -d -n {{ container.hostname }}

#
## attach and run commands

- name: prepare container packages via lxc-attach
  command: lxc-attach -n {{ container.hostname }} -- {{ item }}
  with_items:
    - "apt-get update"
    - "apt-get install -y libterm-ui-perl"
    - "apt-get install -y openssh-server python sudo"
    - "apt-get install -y systemd -t jessie-backports"

- name: prepare container user via lxc-attach
  command: lxc-attach -n {{ container.hostname }} -- useradd -p {{ config_user_password_encrypted }} -s /bin/bash -m {{ config_user_name }}
  args:
     creates: /var/lib/lxc/{{ container.hostname }}/rootfs/home/{{ config_user_name }}

- name: prepare container user via lxc-attach
  command: lxc-attach -n {{ container.hostname }} -- usermod -a -G sudo {{ config_user_name }}

- name: add admin users public keys to container
  authorized_key: user="{{ config_user_name }}" key="{{ config_user_public_key }}" path="/var/lib/lxc/{{ container.hostname }}/rootfs/home/{{ config_user_name }}/.ssh/authorized_keys"

- name: ownership of .ssh/authorized_keys
  file: path=/var/lib/lxc/{{ container.hostname }}/rootfs/home/{{ config_user_name }}/.ssh owner={{ uid_begin }} group={{ uid_begin }} mode=0755 recurse=yes